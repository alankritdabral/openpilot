name: "openpilot env setup"
inputs:
  is_retried:
    description: "A mock param that asserts that we use the setup-with-retry instead of this action directly"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    # assert that this action is retried using the setup-with-retry
    - shell: bash
      if: ${{ inputs.is_retried == 'false' }}
      run: |
        echo "You should not run this action directly. Use setup-with-retry instead"
        exit 1
    # do this after checkout to ensure our custom LFS config is used to pull from GitLab
    - shell: bash
      run: |
          start=$(date +%s)
          git lfs pull
          end=$(date +%s)
          echo "Execution time git lfs: $((end - start)) seconds"
    # build cache
    - id: date
      shell: bash
      run: |
        echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
        echo "$CACHE_COMMIT_DATE"
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: /tmp/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}

    - name: Configure APT to use workspace cache
      shell: bash
      run: |
        mkdir -p ~/apt-cache/archives/partial
        echo 'Dir::Cache::archives "'"$HOME"'/apt-cache/archives";' | sudo tee /etc/apt/apt.conf.d/90-github-cache
    - name: Restore APT packages cache
      uses: actions/cache/restore@v4
      with:
        path: ~/apt-cache/archives # Changed to user directory
        key: Linux-apt-${{ runner.os }}-${{ hashFiles('.github/workflows/setup/apt-packages.txt') }}
    - name: Read packages from packages.txt
      id: read-packages
      shell: bash
      run: |
        PACKAGES=$(cat .github/workflows/setup/apt-packages.txt | tr '\n' ' ')
        echo "PACKAGES=$PACKAGES" >> $GITHUB_ENV
    # - name: Install packages and cache .deb files
    #   if: steps.apt-cache.outputs.cache-hit != 'true'
    #   shell: bash
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y --no-install-recommends $PACKAGES

    - name: Install downloaded packages
      shell: bash
      run: |
        start=$(date +%s)
        cd ~/apt-cache/archives
        ls ~/apt-cache/archives/*.deb | xargs sudo dpkg -i
        sudo apt-get install -f
        end=$(date +%s)
        echo "Execution time: $((end - start)) seconds"
      # sudo dpkg -i *.deb

    - shell: bash
      run: |
        # Remove partial directory and fix ownership
        sudo rm -rf ~/apt-cache/archives/partial
        sudo chown -R $USER:$USER ~/apt-cache/archives

    - name: Save APT packages cache
      uses: actions/cache/save@v4
      with:
        path: ~/apt-cache/archives
        key: Linux-apt-${{ runner.os }}-${{ hashFiles('.github/workflows/setup/apt-packages.txt') }}
    - uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    - shell: bash
      run: |
        start=$(date +%s)
        uv sync --frozen --all-extras
        end=$(date +%s)
        echo "Execution time: $((end - start)) seconds"
