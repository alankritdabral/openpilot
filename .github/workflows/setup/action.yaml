name: "openpilot env setup"

env:
  UV_SYSTEM_PYTHON: 1

runs:
  using: "composite"
  steps:

    - shell: bash
      run: git lfs pull

    - shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
        ca-certificates \
        clang \
        cppcheck \
        build-essential \
        gcc-arm-none-eabi \
        liblzma-dev \
        capnproto \
        libcapnp-dev \
        curl \
        libcurl4-openssl-dev \
        git \
        git-lfs \
        ffmpeg \
        libavformat-dev \
        libavcodec-dev \
        libavdevice-dev \
        libavutil-dev \
        libavfilter-dev \
        libbz2-dev \
        libeigen3-dev \
        libffi-dev \
        libglew-dev \
        libgles2-mesa-dev \
        libglfw3-dev \
        libglib2.0-0 \
        libqt5charts5-dev \
        libncurses5-dev \
        libssl-dev \
        libusb-1.0-0-dev \
        libzmq3-dev \
        libzstd-dev \
        libsqlite3-dev \
        libsystemd-dev \
        locales \
        opencl-headers \
        ocl-icd-libopencl1 \
        ocl-icd-opencl-dev \
        portaudio19-dev \
        qttools5-dev-tools \
        libqt5svg5-dev \
        libqt5serialbus5-dev \
        libqt5x11extras5-dev \
        libqt5opengl5-dev \
        g++-12 \
        qtbase5-dev \
        qtchooser \
        qt5-qmake \
        qtbase5-dev-tools \
        python3-dev \
        python3-venv

        # Set up udev rules for Panda and Jungle devices
        sudo tee /etc/udev/rules.d/12-panda_jungle.rules > /dev/null <<EOF
        SUBSYSTEM=="usb", ATTRS{idVendor}=="bbaa", ATTRS{idProduct}=="ddcf", MODE="0666"
        SUBSYSTEM=="usb", ATTRS{idVendor}=="bbaa", ATTRS{idProduct}=="ddef", MODE="0666"
        EOF

        sudo tee /etc/udev/rules.d/11-panda.rules > /dev/null <<EOF
        SUBSYSTEM=="usb", ATTRS{idVendor}=="bbaa", ATTRS{idProduct}=="ddcc", MODE="0666"
        SUBSYSTEM=="usb", ATTRS{idVendor}=="bbaa", ATTRS{idProduct}=="ddee", MODE="0666"
        EOF

        # Reload udev rules
        sudo udevadm control --reload-rules && sudo udevadm trigger


    - shell: bash
      run: |
        which python

    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x' 

    - name: Install the project
      shell: bash
      run: |
        python3 -m venv myenv
        source myenv/bin/activate
        sudo pip install -r .github/workflows/setup/requirements.txt
        sudo pip install pycryptodomex
        sudo pip show pycryptodomex

    # build cache
    - id: date
      shell: bash
      run: echo "CACHE_COMMIT_DATE=$(git log -1 --pretty='format:%cd' --date=format:'%Y-%m-%d-%H:%M')" >> $GITHUB_ENV
    - shell: bash
      run: echo "$CACHE_COMMIT_DATE"
    - id: scons-cache
      uses: ./.github/workflows/auto-cache
      with:
        path: .ci_cache/scons_cache
        key: scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}-${{ github.sha }}
        restore-keys: |
          scons-${{ runner.arch }}-${{ env.CACHE_COMMIT_DATE }}
          scons-${{ runner.arch }}
    # as suggested here: https://github.com/moby/moby/issues/32816#issuecomment-910030001
    - id: normalize-file-permissions
      shell: bash
      name: Normalize file permissions to ensure a consistent docker build cache
      run: |
        find . -type f -executable -not -perm 755 -exec chmod 755 {} \;
        find . -type f -not -executable -not -perm 644 -exec chmod 644 {} \;
    # build our docker image
    - shell: bash 
      run: eval ${{ env.BUILD }}
